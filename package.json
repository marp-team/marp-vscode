{
  "name": "marp-vscode",
  "displayName": "Marp for VS Code",
  "publisher": "marp-team",
  "version": "3.1.1",
  "description": "Create slide deck written in Marp Markdown on VS Code",
  "categories": [
    "Other"
  ],
  "keywords": [
    "marp",
    "markdown",
    "slide",
    "deck",
    "presentation"
  ],
  "license": "MIT",
  "author": {
    "name": "Marp team",
    "url": "https://github.com/marp-team"
  },
  "contributors": [
    {
      "name": "Yuki Hattori",
      "url": "https://github.com/yhatt"
    }
  ],
  "sponsor": {
    "url": "https://github.com/sponsors/yhatt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/marp-team/marp-vscode"
  },
  "engines": {
    "vscode": "^1.99.0"
  },
  "main": "./lib/extension.js",
  "browser": "./dist/extension.js",
  "icon": "images/icon.png",
  "galleryBanner": {
    "color": "#d9edf8",
    "theme": "light"
  },
  "activationEvents": [
    "onLanguage:markdown"
  ],
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": "limited",
      "description": "Workspace trust is required for exporting slide deck, and using themes configured in the workspace.",
      "restrictedConfigurations": [
        "markdown.marp.html",
        "markdown.marp.enableHtml",
        "markdown.marp.themes"
      ]
    },
    "virtualWorkspaces": true
  },
  "contributes": {
    "colors": [
      {
        "id": "marp.directiveKeyForeground",
        "description": "Forground decoration color for the key of Marp directive",
        "defaults": {
          "dark": "#67b8e3ff",
          "light": "#0288d1ff",
          "highContrast": "#67b8e3ff"
        }
      }
    ],
    "commands": [
      {
        "category": "Marp",
        "command": "markdown.marp.export",
        "title": "Export Slide Deck..."
      },
      {
        "category": "Marp",
        "command": "markdown.marp.newMarpMarkdown",
        "title": "New Untitled Marp Markdown For Slide Deck",
        "shortTitle": "Marp Markdown"
      },
      {
        "category": "Marp",
        "command": "markdown.marp.showQuickPick",
        "title": "Show Quick Pick Of Marp Commands...",
        "icon": "$(marp-brand)"
      },
      {
        "category": "Marp",
        "command": "markdown.marp.toggleMarpFeature",
        "title": "Toggle Marp Feature For Current Markdown"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Marp for VS Code",
      "properties": {
        "markdown.marp.breaks": {
          "type": "string",
          "enum": [
            "off",
            "on",
            "inherit"
          ],
          "default": "on",
          "description": "Sets how line-breaks are rendered in Marp Markdown. It can set separately because the default setting of Marp ecosystem is different from VS Code.",
          "markdownEnumDescriptions": [
            "Ignore line-breaks in rendered Marp Markdown preview.",
            "Show line-breaks in rendered Marp Markdown preview. It is the default setting of Marp ecosystem.",
            "Use inherited setting from `#markdown.preview.breaks#`."
          ]
        },
        "markdown.marp.browser": {
          "type": "string",
          "enum": [
            "auto",
            "chrome",
            "edge",
            "firefox"
          ],
          "default": "auto",
          "description": "Controls the installed browser using internally to export PDF, PPTX, and the image.",
          "enumDescriptions": [
            "Automatically detect Chrome, Chromium, Edge, or Firefox.",
            "Use Google Chrome.",
            "Use Microsoft Edge.",
            "Use Mozilla Firefox."
          ]
        },
        "markdown.marp.browserPath": {
          "type": "string",
          "default": "",
          "markdownDescription": "Configure the custom path for the installed browser using internally to export PDF, PPTX, and the image. The kind of browser is determined by `#markdown.marp.browser#`. When set to empty, Marp will find out a suitable installed browser automatically."
        },
        "markdown.marp.html": {
          "type": "string",
          "enum": [
            "off",
            "default",
            "all"
          ],
          "markdownEnumDescriptions": [
            "Disable all HTML elements, including originally allowed HTML elements by Marp.",
            "Enable only selectively enabled HTML elements by Marp. _([See the list of HTML elements](https://github.com/marp-team/marp-core/blob/main/src/html/allowlist.ts))_",
            "Enable all HTML elements. This setting may become the slide rendering insecure."
          ],
          "default": "default",
          "description": "Sets which HTML elements within Marp Markdown are enabled in rendered slides. If the workspace is not trusted, this setting treats as always \"off\"."
        },
        "markdown.marp.exportType": {
          "type": "string",
          "enum": [
            "html",
            "pdf",
            "pptx",
            "png",
            "jpeg"
          ],
          "default": "pdf",
          "description": "Sets default export type.",
          "enumDescriptions": [
            "HTML slide deck",
            "PDF slide deck",
            "PowerPoint document",
            "PNG image (first slide only)",
            "JPEG image (first slide only)"
          ]
        },
        "markdown.marp.exportAutoOpen": {
          "type": "boolean",
          "default": true,
          "description": "Automatically opens the exported file using the default application installed on your operating system."
        },
        "markdown.marp.mathTypesetting": {
          "type": "string",
          "enum": [
            "off",
            "mathjax",
            "katex"
          ],
          "default": "mathjax",
          "markdownDescription": "Controls math syntax and the default library for rendering math in [Marp Core](https://github.com/marp-team/marp-core). A using library can override by math global directive in Markdown. Please note that math rendering in Marp Markdown is not following the setting in `#markdown.math.enabled#`.",
          "markdownEnumDescriptions": [
            "Disable math syntax and math global directive.",
            "Use MathJax (https://www.mathjax.org/). It is the default library in Marp Core v3.",
            "Use KaTeX (https://katex.org/)."
          ]
        },
        "markdown.marp.outlineExtension": {
          "type": "boolean",
          "default": true,
          "description": "Enables the outline extension for Marp Markdown. If enabled, VS Code's outline view will reflect slide splitters, and you can fold regions of the slide content in the editor."
        },
        "markdown.marp.pdf.noteAnnotations": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Adds [presenter notes](https://marpit.marp.app/usage?id=presenter-notes) to exported PDF as note annotations."
        },
        "markdown.marp.pdf.outlines": {
          "type": "string",
          "enum": [
            "off",
            "pages",
            "headings",
            "both"
          ],
          "default": "off",
          "description": "Adds outlines (bookmarks) to exported PDF. It is useful for navigation in PDF viewer.",
          "enumDescriptions": [
            "Disable outlines.",
            "Add outlines based on each slide page.",
            "Add outlines based on each Markdown heading.",
            "Add outlines based on both slide pages and Markdown headings."
          ]
        },
        "markdown.marp.pptx.editable": {
          "type": "string",
          "enum": [
            "off",
            "on",
            "smart"
          ],
          "default": "off",
          "markdownDescription": "Sets whether make editable or not when exporting to PowerPoint document. You should install both of the browser and [LibreOffice Impress](https://libreoffice.org/) to export the editable PPTX. Please note that the editable PPTX output may fail to convert or be generated with an incomplete layout depending on the slide content.",
          "markdownEnumDescriptions": [
            "Always export non-editable PPTX. It has full visual reproducibillity and presenter note support.",
            "Always export editable PPTX. Please note that the editable PPTX may fail to convert or be generated with an incomplete layout depending on the slide content.",
            "Try to export editable PPTX first, and fallback to non-editable PPTX if failed."
          ],
          "tags": [
            "experimental"
          ]
        },
        "markdown.marp.strictPathResolutionDuringExport": {
          "type": "boolean",
          "default": false,
          "description": "Enables strict path resolution during export. If enabled, the export command tries to resolve relative paths from VS Code workspace that a Markdown file belongs. If disabled, or the Markdown does not belong to any workspace, the export command resolves paths based on the local file system.",
          "tags": [
            "experimental"
          ]
        },
        "markdown.marp.themes": {
          "type": "array",
          "default": [],
          "markdownDescription": "A list of URLs or local paths to additional [theme CSS](https://marpit.marp.app/theme-css) for Marp core and Marpit framework. The rule for paths is following `#markdown.styles#`.",
          "items": {
            "type": "string"
          }
        },
        "markdown.marp.enableHtml": {
          "type": "boolean",
          "default": false,
          "description": "Enables all HTML elements in Marp Markdown. This setting is working only in the trusted workspace.",
          "deprecationMessage": "The setting \"markdown.marp.enableHtml\" is deprecated. Please use \"markdown.marp.html\" instead."
        },
        "markdown.marp.chromePath": {
          "type": "string",
          "default": "",
          "description": "Sets the custom path for Chrome or Chromium-based browser to export PDF, PPTX, and image. If it's empty, Marp will find out the installed Google Chrome / Chromium / Microsoft Edge.",
          "deprecationMessage": "The setting \"markdown.marp.chromePath\" is deprecated. Please use \"markdown.marp.browserPath\" instead."
        }
      }
    },
    "icons": {
      "marp-brand": {
        "description": "Marp brand",
        "default": {
          "fontPath": "./images/icon.woff",
          "fontCharacter": "\\e000"
        }
      }
    },
    "languageModelTools": [
      {
        "name": "export_marp",
        "displayName": "Export Marp slide deck",
        "icon": "$(marp-brand)",
        "modelDescription": "Export Marp slide deck from given Markdown file to specific path. Export command will be invoked in the current workspace.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "exportMarp",
        "inputSchema": {
          "type": "object",
          "properties": {
            "inputFilePath": {
              "type": "string",
              "description": "An absolute path to the input Markdown file."
            },
            "outputFilePath": {
              "type": "string",
              "description": "An absolute path to the output file. The file extension must be one of the supported formats: `.html`, `.pdf`, `.pptx`, `.png`, or `.jpg` (`.jpeg`). If given the image format, the output file will be a single image of the first slide only."
            }
          },
          "required": [
            "inputFilePath",
            "outputFilePath"
          ]
        },
        "tags": [
          "marp"
        ]
      }
    ],
    "markdown.markdownItPlugins": true,
    "markdown.previewScripts": [
      "./preview/preview.js"
    ],
    "markdown.previewStyles": [
      "./marp-vscode.css"
    ],
    "menus": {
      "editor/title": [
        {
          "command": "markdown.marp.showQuickPick",
          "group": "navigation",
          "when": "editorLangId == markdown"
        }
      ],
      "file/newFile": [
        {
          "command": "markdown.marp.newMarpMarkdown",
          "group": "file"
        }
      ]
    }
  },
  "private": true,
  "vsce": {
    "yarn": false
  },
  "prettier": {
    "semi": false,
    "singleQuote": true
  },
  "stylelint": {
    "extends": [
      "stylelint-config-standard"
    ],
    "rules": {
      "selector-id-pattern": null,
      "selector-type-no-unknown": [
        true,
        {
          "ignoreTypes": [
            "foreignobject"
          ]
        }
      ]
    }
  },
  "scripts": {
    "build": "webpack --env production",
    "build:node": "webpack --env production --env target=node",
    "build:preview": "webpack --env production --env target=preview",
    "build:web": "webpack --env production --env target=web",
    "check:audit": "npm audit",
    "check:format": "npm run -s format -- -c",
    "check:ts": "tsc --noEmit",
    "dev:web": "vscode-test-web --extensionDevelopmentPath=.",
    "format": "prettier \"**/*.{css,js,json,md,scss,ts,yaml,yml}\"",
    "format:write": "npm run -s format -- --write",
    "lint:css": "stylelint \"./*.{css,scss}\"",
    "lint:js": "eslint --cache",
    "package": "vsce package",
    "preversion": "run-p check:* lint:* test:*:coverage",
    "test:unit": "jest",
    "test:unit:coverage": "jest --coverage",
    "version": "curl https://raw.githubusercontent.com/marp-team/actions/v1/lib/scripts/version.js | node && git add -A CHANGELOG.md",
    "vsce:publish": "vsce publish",
    "vscode:prepublish": "run-s preversion build",
    "watch": "webpack --watch",
    "watch:node": "webpack --watch --env target=node,preview",
    "watch:web": "webpack --watch --env target=web,preview"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.9",
    "@eslint/js": "^9.22.0",
    "@marp-team/marp-core": "^4.0.1",
    "@types/color-string": "^1.5.5",
    "@types/express": "^4.17.21",
    "@types/jest": "^29.5.14",
    "@types/lodash.debounce": "^4.0.9",
    "@types/markdown-it": "^14.1.2",
    "@types/vscode": "~1.99.0",
    "@vscode/test-web": "^0.0.67",
    "@vscode/vsce": "^3.2.2",
    "abort-controller": "^3.0.0",
    "color-string": "^2.0.1",
    "dedent": "^1.5.3",
    "esbuild": "^0.25.1",
    "esbuild-loader": "^4.3.0",
    "eslint": "^9.22.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-import-resolver-typescript": "^3.8.7",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jest": "^28.11.0",
    "eslint-plugin-unicorn": "^57.0.0",
    "express": "^4.21.2",
    "fetch-ponyfill": "^7.1.0",
    "globals": "^16.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-junit": "^16.0.0",
    "lodash.debounce": "^4.0.8",
    "markdown-it": "^14.1.0",
    "nanoid": "^5.1.3",
    "npm-check-updates": "^17.1.15",
    "npm-run-all2": "^7.0.2",
    "os-browserify": "^0.3.0",
    "path-browserify": "^1.0.1",
    "portfinder": "1.0.35",
    "prettier": "^3.5.3",
    "process": "^0.11.10",
    "rehype-parse": "^9.0.1",
    "remark-math": "^6.0.0",
    "remark-parse": "^11.0.0",
    "stylelint": "^16.16.0",
    "stylelint-config-standard": "^37.0.0",
    "ts-jest": "^29.2.6",
    "tslib": "^2.8.1",
    "typed-emitter": "^2.1.0",
    "typescript": "^5.8.2",
    "typescript-eslint": "^8.26.1",
    "unified": "^11.0.5",
    "unist-util-visit": "^5.0.0",
    "util": "^0.12.5",
    "vscode-uri": "^3.1.0",
    "webpack": "^5.98.0",
    "webpack-cli": "^6.0.1",
    "yaml": "^2.7.0"
  },
  "dependencies": {
    "@marp-team/marp-cli": "^4.1.2"
  }
}
